SCCTEXT Version 4.0.0.2
PLATFORM C(8,0),UNIQUEID C(10,0),TIMESTAMP N(10,0),CLASS M(4,0),CLASSLOC M(4,0),BASECLASS M(4,0),OBJNAME M(4,0),PARENT M(4,0),PROPERTIES M(4,0),PROTECTED M(4,0),METHODS M(4,0),OBJCODE M(4,0),OLE M(4,0),OLE2 M(4,0),RESERVED1 M(4,0),RESERVED2 M(4,0),RESERVED3 M(4,0),RESERVED4 M(4,0),RESERVED5 M(4,0),RESERVED6 M(4,0),RESERVED7 M(4,0),RESERVED8 M(4,0),USER M(4,0)
1252

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] Class     
[START RESERVED1]
VERSION =   3.00[END RESERVED1]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NJ9BO
[CLASS] checkbox
[BASECLASS] checkbox
[OBJNAME] basecheckbox
[START PROPERTIES]
</VFPData>
<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
<memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange" favorites="True"/>
Alignment = 0
AutoSize = .T.
BackStyle = 0
Caption = "Check1"
FontName = "Tahoma"
FontSize = 8
Name = "basecheckbox"
Value = .F.
_memberdata =      224<VFPData>
lupdatecontrolsourceonchange = .F.
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case not .lUpdateControlSourceOnChange or empty(.ControlSource) or ;
			.Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case not .lUpdateControlSourceOnChange or empty(.ControlSource) or ;
			.Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
_memberdata XML Metadata for customizable properties
lupdatecontrolsourceonchange .T. to update the control source in InteractiveChange (needed if AnyChange calls Refresh)
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecheckbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NO0N8IIY
[CLASS] collection
[BASECLASS] collection
[OBJNAME] basecollection
[START PROPERTIES]
Height = 23
Name = "buildercollection"
Width = 23
_memberdata = 
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecollection

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NJYFR
[CLASS] combobox
[BASECLASS] combobox
[OBJNAME] basecombobox
[START PROPERTIES]
</VFPData>
<memberdata name="aitems" type="property" display="aItems"/>
<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
FontName = "Tahoma"
FontSize = 8
Height = 22
ItemTips = .T.
Name = "basecombobox"
Style = 2
_memberdata =      163<VFPData>
[END PROPERTIES]
[START METHODS]
PROCEDURE DropDown
* Set DisplayCount to an appropriate value based on how much room there is
* below the form.

local lnHeight
lnHeight = iif(Thisform.ShowWindow = 2, sysmetric(2), _vfp.Height)
This.DisplayCount = max(ceiling((lnHeight - Thisform.Top - ;
	objtoclient(This, 1))/This.Height), 7)

ENDPROC
PROCEDURE Init
* Initialize aItems.

This.aItems = ''

ENDPROC
PROCEDURE InteractiveChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
^aitems[1,0] An array of items for the RowSource if RowSourceType is set to 5-Array
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecombobox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NFDNC
[CLASS] commandbutton
[BASECLASS] commandbutton
[OBJNAME] basecommandbutton
[START PROPERTIES]
Caption = "Command1"
FontName = "Tahoma"
FontSize = 8
Height = 23
Name = "basecommandbutton"
Width = 75
_memberdata = 
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecommandbutton
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NI0NJ
[CLASS] container
[BASECLASS] container
[OBJNAME] basecontainer
[START PROPERTIES]
BackStyle = 0
BorderWidth = 0
Name = "basecontainer"
Style = 3
_memberdata = 
[END PROPERTIES]
[START METHODS]
PROCEDURE enabled_assign
lparameters tlEnabled
This.Enabled = tlEnabled
This.SetAll('Enabled', tlEnabled)

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*enabled_assign 
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basecontainer

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0OEVWC
[CLASS] editbox
[BASECLASS] editbox
[OBJNAME] baseeditbox
[START PROPERTIES]
</VFPData>
<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
<memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange" favorites="True"/>
<memberdata name="validation" type="method" display="Validation" favorites="True"/>
FontName = "Tahoma"
FontSize = 8
IntegralHeight = .T.
Name = "baseeditbox"
SelectOnEntry = .T.
_memberdata =      308<VFPData>
lupdatecontrolsourceonchange = .F.
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), call
* the AnyChange method, and restore the current cursor position in case
* This.Refresh got called from AnyChange.

local lnSelStart, ;
	lcAlias, ;
	lcField
with This
	lnSelStart = .SelStart
	lcAlias    = juststem(.ControlSource)
	lcField    = justext(.ControlSource)
	do case
		case not .lUpdateControlSourceOnChange or empty(.ControlSource) or ;
			.Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
	.SelStart = lnSelStart
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case not .lUpdateControlSourceOnChange or empty(.ControlSource) or ;
			.Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE Valid
* If we're not canceling, call the Validation method to do the actual
* validation.

local luReturn
with This
	if lastkey() <> 27
		luReturn = .Validation()
	else
		luReturn = .T.
	endif lastkey() <> 27
endwith
return luReturn

ENDPROC
PROCEDURE When
* Store the current value into the Tag property so it can be restored if Valid
* fails.

This.Tag = This.Value

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE validation
* Abstract method

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*validation Custom validation code
_memberdata XML Metadata for customizable properties
lupdatecontrolsourceonchange .T. to update the control source in InteractiveChange (needed if AnyChange calls Refresh)
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseeditbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _18B0TPO44
[CLASS] form
[BASECLASS] form
[OBJNAME] baseform
[START PROPERTIES]

</VFPData>
<memberdata name="cfoxuserid" type="property" display="cFoxUserID" favorites="True"/>
<memberdata name="cfoxusername" type="property" display="cFoxUserName" favorites="True"/>
<memberdata name="cleanup" type="method" display="Cleanup"/>
<memberdata name="lpersistsizeposition" type="property" display="lPersistSizePosition" favorites="True"/>
<memberdata name="lrelease" type="property" display="lRelease"/>
<memberdata name="lsavesettings" type="property" display="lSaveSettings" favorites="True"/>
<memberdata name="opersist" type="property" display="oPersist"/>
<memberdata name="refreshform" type="method" display="RefreshForm"/>
<memberdata name="releasemembers" type="method" display="ReleaseMembers"/>
<memberdata name="restoresettings" type="method" display="RestoreSettings" favorites="True"/>
<memberdata name="savesettings" type="method" display="SaveSettings" favorites="True"/>
AllowOutput = .F.
AutoCenter = .T.
Caption = "Form"
DataSession = 2
DoCreate = .T.
FontName = "Tahoma"
FontSize = 8
Name = "baseform"
ShowTips = .T.
_memberdata =      912<VFPData>
cfoxuserid = 
cfoxusername = 
lpersistsizeposition = .T.
lrelease = .F.
lsavesettings = .T.
opersist = .NULL.
[END PROPERTIES]
[START PROTECTED]
cleanup
lrelease
releasemembers
[END PROTECTED]
[START METHODS]
PROCEDURE Destroy
with This

* Hide the form so it appears to go away faster.

	.Hide()

* Cleanup as the object is destroyed.

	.Cleanup()

* Save the current settings

	if .lSaveSettings
		.SaveSettings()
	endif .lSaveSettings

* Nuke member objects.

	.oPersist = .NULL.
endwith

ENDPROC
PROCEDURE Init
local lcLibrary
with This

* Restore saved options and the size and position of the form.

	if .lSaveSettings
		lcLibrary = 'FoxResource.prg'
		.oPersist = newobject('FoxResource', lcLibrary)
		.RestoreSettings()
	endif .lSaveSettings
endwith

ENDPROC
PROCEDURE Load
* Set some environmental things the way we want if we're in a private
* datasession. These are in alphabetical order. Not all are datasession-
* specific, but we'll set 'em anyway.

if This.DataSession = 2
	set ansi       off
	set compatible off			&& not datasession-specific
	set cpdialog   off			&& not datasession-specific
	set deleted    on
	set exact      off
	set exclusive  off
	set multilocks on
	set near       off
	set safety     off
	set talk       off
	set unique     off
	sys(3054, 0)

* Set CENTURY after SYSFORMATS, since SYSFORMATS changes CENTURY.

	set sysformats on
	set century    on
endif This.DataSession = 2

ENDPROC
PROCEDURE Release
* Release the object. Note the avoidance of "with This" in this code to prevent
* potential problems with dangling object references.

if This.lRelease
	nodefault
	return .F.
endif This.lRelease
This.Cleanup()

ENDPROC
PROCEDURE cleanup
* Clean up references when the form is closed.

if This.lRelease
	return .F.
endif This.lRelease
This.lRelease = .T.
This.ReleaseMembers()

ENDPROC
PROCEDURE refreshform
* Lock for form while refreshing.

This.LockScreen = .T.
This.Refresh()
This.LockScreen = .F.

ENDPROC
PROCEDURE releasemembers
* Abstract method.

ENDPROC
PROCEDURE restoresettings
* Restore saved settings from FOXUSER.

with This
	.oPersist.Load(.cFoxUserID, .cFoxUserName)
	if .lPersistSizePosition
		.Top    = max(nvl(.oPersist.Get('Top'),  .Top),  0)
		.Left   = max(nvl(.oPersist.Get('Left'), .Left), 0)
		.Height = nvl(.oPersist.Get('Height'),   .Height)
		.Width  = nvl(.oPersist.Get('Width'),    .Width)
	endif .lPersistSizePosition
endwith

ENDPROC
PROCEDURE savesettings
* Save settings to FOXUSER.

with This
	if .lPersistSizePosition
		.oPersist.Set('Top',    .Top)
		.oPersist.Set('Left',   .Left)
		.oPersist.Set('Height', .Height)
		.oPersist.Set('Width',  .Width)
	endif .lPersistSizePosition
	.oPersist.Save(.cFoxUserID, .cFoxUserName)
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*cleanup Cleans up references when the form is closed
*refreshform Refreshes the form with the LockScreen .T.
*releasemembers Releases member objects
*restoresettings Restores saved settings from FOXUSER
*savesettings Saves settings to FOXUSER
_memberdata XML Metadata for customizable properties
cfoxuserid The FOXUSER ID to save/restore settings to
cfoxusername The FOXUSER NAME to save/restore settings to
lpersistsizeposition .T. to persist the size and position of the form
lrelease .T. if the form is being released
lsavesettings .T. to save and restore settings
opersist A reference to a FoxResource object
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseform
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1RV0VS3WJ
[CLASS] grid
[BASECLASS] grid
[OBJNAME] basegrid
[START PROPERTIES]
FontName = "Tahoma"
FontSize = 8
Height = 200
Name = "basegrid"
RowHeight = 16
Width = 320
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basegrid
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1RV0X0E7U
[CLASS] image
[BASECLASS] image
[OBJNAME] baseimage
[START PROPERTIES]
BackStyle = 0
Height = 17
Name = "baseimage"
Width = 100
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseimage

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NKBXQ
[CLASS] label
[BASECLASS] label
[OBJNAME] baselabel
[START PROPERTIES]
AutoSize = .T.
BackStyle = 0
Caption = "Label1"
FontName = "Tahoma"
FontSize = 8
Name = "baselabel"
_memberdata = 
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baselabel

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0RP0KP8Y2
[CLASS] container
[BASECLASS] container
[OBJNAME] baselabelledbox
[START PROPERTIES]
</VFPData>
<memberdata name="builder" type="property" display="Builder"/>
BackStyle = 0
BorderWidth = 0
Height = 133
Name = "baselabelledbox"
Style = 3
Width = 168
_memberdata =       83<VFPData>
builder = BaseLabelledBoxBuilder.PRG
[END PROPERTIES]
[START METHODS]
PROCEDURE height_assign
* When the height of the container is resized, resize the shape.

lparameters tnHeight
This.Height = tnHeight
This.shpBox.Height = tnHeight - This.shpBox.Top

ENDPROC
PROCEDURE width_assign
* When the width of the container is resized, resize the shape.

lparameters tnWidth
store tnWidth to This.Width, This.shpBox.Width

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
3[END RESERVED2]
[START RESERVED3]
*height_assign 
*width_assign 
_memberdata XML Metadata for customizable properties
builder Specifies the builder for this object
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0RP0KXY9D
[CLASS] baselabel
[CLASSLOC] basecontrols.vcx
[BASECLASS] label
[OBJNAME] lblBox
[PARENT] baselabelledbox
[START PROPERTIES]
BackStyle = 1
Left = 10
Name = "lblBox"
Style = 3
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0RP0KXY92
[CLASS] baseline3d
[CLASSLOC] basecontrols.vcx
[BASECLASS] shape
[OBJNAME] shpBox
[PARENT] baselabelledbox
[START PROPERTIES]
Height = 124
Name = "shpBox"
Top = 7
Width = 166
[END PROPERTIES]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baselabelledbox

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NS0R832K
[CLASS] shape
[BASECLASS] shape
[OBJNAME] baseline3d
[START PROPERTIES]
BackStyle = 0
Height = 1
Name = "baseline3d"
SpecialEffect = 0
Style = 3
Width = 100
_memberdata = 
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseline3d

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NH0MVC3K
[CLASS] listbox
[BASECLASS] listbox
[OBJNAME] baselistbox
[START PROPERTIES]
</VFPData>
<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
FontName = "Tahoma"
FontSize = 8
IntegralHeight = .T.
ItemTips = .T.
Name = "baselistbox"
_memberdata =      102<VFPData>
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE ProgrammaticChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baselistbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NXWHS
[CLASS] optionbutton
[BASECLASS] optionbutton
[OBJNAME] baseoptionbutton
[START PROPERTIES]
AutoSize = .T.
BackStyle = 0
Caption = "Option1"
FontName = "Tahoma"
FontSize = 8
Name = "baseoptionbutton"
_memberdata = 
[END PROPERTIES]
[START METHODS]
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseoptionbutton
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NWI42
[CLASS] optiongroup
[BASECLASS] optiongroup
[OBJNAME] baseoptiongroup
[START PROPERTIES]

</VFPData>
<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
<memberdata name="enabled_assign" type="method" display="Enabled_Assign"/>
BackStyle = 0
Baseoptionbutton1.Left = 5
Baseoptionbutton1.Name = "Baseoptionbutton1"
Baseoptionbutton1.Top = 5
Baseoptionbutton2.Left = 5
Baseoptionbutton2.Name = "Baseoptionbutton2"
Baseoptionbutton2.Top = 23
BorderStyle = 0
ButtonCount = 2
Height = 46
MemberClass = "baseoptionbutton"
MemberClassLibrary = basecontrols.vcx
Name = "baseoptiongroup"
Value = 0
Width = 71
_memberdata =      178<VFPData>
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE ProgrammaticChange
local lcAlias, ;
	lcField
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			replace &lcField with .Value in (lcAlias)
		otherwise
			store .Value to (.ControlSource)
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE enabled_assign
* Enable or disable member objects.

lparameters tlEnabled
This.SetAll('Enabled', tlEnabled)
This.Enabled = tlEnabled

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*enabled_assign Enable/disabled member objects
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseoptiongroup
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NH0LD5ZU
[CLASS] page
[BASECLASS] page
[OBJNAME] basepage
[START PROPERTIES]
Caption = "Page1"
FontName = "Tahoma"
FontSize = 8
Height = 142
Name = "basepage"
Width = 142
_memberdata = 
[END PROPERTIES]
[START METHODS]
PROCEDURE Activate
* Refresh all controls.

local llLockScreen
with This
	llLockScreen = Thisform.LockScreen
	if not llLockScreen
		Thisform.LockScreen = .T.
	endif not llLockScreen
	.Refresh()
	if not llLockScreen
		Thisform.LockScreen = .F.
	endif not llLockScreen
endwith

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basepage

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0NEI3J
[CLASS] pageframe
[BASECLASS] pageframe
[OBJNAME] basepageframe
[START PROPERTIES]

</VFPData>
<memberdata name="getpagenumber" type="method" display="GetPageNumber"/>
Basepage1.Name = "Basepage1"
ErasePage = .T.
Height = 250
MemberClass = "basepage"
MemberClassLibrary = basecontrols.vcx
Name = "basepageframe"
PageCount = 1
TabStyle = 1
_memberdata =       94<VFPData>
[END PROPERTIES]
[START METHODS]
PROCEDURE getpagenumber
* Gets the page number in the Pages collection that matches the specified page
* order. These values won't be the same if the PageOrder property for any page
* has been changed.

lparameters tnActivePage
local lnPage, ;
	lnI
with This
	lnPage = 0
	for lnI = 1 to .PageCount
		if .Pages[lnI].PageOrder = tnActivePage
			lnPage = lnI
			exit
		endif .Pages[lnI].PageOrder = tnActivePage
	next lnI
endwith
return lnPage

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*getpagenumber Gets the page number in the Pages collection that matches the specified page order
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basepageframe

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _1A20U8PB3
[CLASS] shape
[BASECLASS] shape
[OBJNAME] baseshape
[START PROPERTIES]
BackStyle = 0
Height = 17
Name = "baseshape"
Width = 100
[END PROPERTIES]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] baseshape

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0OM0FJA9Q
[CLASS] spinner
[BASECLASS] spinner
[OBJNAME] basespinner
[START PROPERTIES]
</VFPData>
<memberdata name="anychange" type="method" display="AnyChange"/>
FontName = "Tahoma"
FontSize = 8
Height = 22
Name = "basespinner"
SelectOnEntry = .T.
_memberdata =       85<VFPData>
[END PROPERTIES]
[START METHODS]
PROCEDURE Error
lparameters tnError, ;
	tcMethod, ;
	tnLine
do case

* Spinners bound to object properties seem to have a problem when invalid
* values are entered from the keyboard: the Error method fires with error 1469
* (property value is out of bounds) with tcMethod being "ControlSource" rather
* than the Valid method catching it.

	case tnError = 1469
		return

* Ignore "property is read-only" errors.

	case tnError = 1743
		return

* All other errors get passed on to the form.

	otherwise
		Thisform.Error(tnError, This.Name + '.' + tcMethod, tnLine)
endcase

ENDPROC
PROCEDURE InteractiveChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), call
* the AnyChange method, and restore the current cursor position in case
* This.Refresh got called from AnyChange. Note: if the value is invalid, don't
* do anything.

local lnSelStart, ;
	lcAlias, ;
	lcField
if not between(This.Value, This.SpinnerLowValue, This.SpinnerHighValue)
	nodefault
	return
endif not between(This.Value, ...
with This
	lnSelStart = .SelStart
	lcAlias    = juststem(.ControlSource)
	lcField    = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			try
				replace &lcField with .Value in (lcAlias)
			catch
				nodefault
			endtry
		otherwise
			try
				store .Value to (.ControlSource)
			catch
				nodefault
			endtry
	endcase
	.AnyChange()
	.SelStart = lnSelStart
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource) and
* call the AnyChange method. Note: if the value is invalid, don't do anything.

local lcAlias, ;
	lcField
if not between(This.Value, This.SpinnerLowValue, This.SpinnerHighValue)
	nodefault
	return
endif not between(This.Value, ...
with This
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case empty(.ControlSource) or .Value == evaluate(.ControlSource)
		case used(lcAlias)
			try
				replace &lcField with .Value in (lcAlias)
			catch
				nodefault
			endtry
		otherwise
			try
				store .Value to (.ControlSource)
			catch
				nodefault
			endtry
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
_memberdata XML Metadata for customizable properties
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basespinner
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]

[ RECORD]
[PLATFORM] WINDOWS 
[UNIQUEID] _0NG0O3172
[CLASS] textbox
[BASECLASS] textbox
[OBJNAME] basetextbox
[START PROPERTIES]
</VFPData>
<memberdata name="anychange" type="method" display="AnyChange" favorites="True"/>
<memberdata name="lupdatecontrolsourceonchange" type="property" display="lUpdateControlSourceOnChange" favorites="True"/>
<memberdata name="validation" type="method" display="Validation" favorites="True"/>
FontName = "Tahoma"
FontSize = 8
Format = "T"
Height = 22
Name = "basetextbox"
SelectOnEntry = .T.
_memberdata =      308<VFPData>
lupdatecontrolsourceonchange = .F.
[END PROPERTIES]
[START METHODS]
PROCEDURE InteractiveChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), being
* sure to trim it if it's a character, then call the AnyChange method, and
* restore the current cursor position in case This.Refresh got called from
* AnyChange.

local lnSelStart, ;
	luValue, ;
	lcAlias, ;
	lcField
with This
	lnSelStart = .SelStart
	luValue    = iif(vartype(.Value) = 'C', trim(.Value), .Value)
	lcAlias    = juststem(.ControlSource)
	lcField    = justext(.ControlSource)
	do case
		case not .lUpdateControlSourceOnChange or empty(.ControlSource) or ;
			.Value == evaluate(.ControlSource)
		case used(lcAlias)
			try
				replace &lcField with .Value in (lcAlias)
			catch
				nodefault
			endtry
		otherwise
			try
				store .Value to (.ControlSource)
			catch
				nodefault
			endtry
	endcase
	.AnyChange()
	.SelStart = lnSelStart
endwith

ENDPROC
PROCEDURE KeyPress
* Prevent Ctrl-0 from inserting a null value.

lparameters tnKeyCode, ;
	tnShiftAltCtrl
if tnKeyCode = asc('0') and bittest(tnShiftAltCtrl, 1)
	nodefault
endif tnKeyCode = asc('0') ...

ENDPROC
PROCEDURE ProgrammaticChange
* Write the current value to the ControlSource if necessary (otherwise
* anything called from here can't check the value of our ControlSource), being
* sure to trim it if it's a character, then call the AnyChange method.

local luValue, ;
	lcAlias, ;
	lcField
with This
	luValue = iif(vartype(.Value) = 'C', trim(.Value), .Value)
	lcAlias = juststem(.ControlSource)
	lcField = justext(.ControlSource)
	do case
		case not .lUpdateControlSourceOnChange or empty(.ControlSource) or ;
			.Value == evaluate(.ControlSource)
		case used(lcAlias)
			try
				replace &lcField with .Value in (lcAlias)
			catch
				nodefault
			endtry
		otherwise
			try
				store .Value to (.ControlSource)
			catch
				nodefault
			endtry
	endcase
	.AnyChange()
endwith

ENDPROC
PROCEDURE Valid
* If we're not canceling, call the Validation method to do the actual
* validation.

local luReturn
with This
	if lastkey() <> 27
		luReturn = .Validation()
	else
		luReturn = .T.
	endif lastkey() <> 27
endwith
return luReturn

ENDPROC
PROCEDURE When
* Store the current value into the Tag property so it can be restored if Valid
* fails.

This.Tag = This.Value

ENDPROC
PROCEDURE anychange
* Abstract method.

ENDPROC
PROCEDURE validation
* Abstract method

ENDPROC
[END METHODS]
[START RESERVED1]
Class[END RESERVED1]
[START RESERVED2]
1[END RESERVED2]
[START RESERVED3]
*anychange Called from both InteractiveChange and ProgrammaticChange to consolidate handling any changes
*validation Custom validation code
_memberdata XML Metadata for customizable properties
lupdatecontrolsourceonchange .T. to update the control source in InteractiveChange (needed if AnyChange calls Refresh)
[END RESERVED3]
[START RESERVED6]
Pixels[END RESERVED6]

[ RECORD]
[PLATFORM] COMMENT 
[UNIQUEID] RESERVED  
[OBJNAME] basetextbox
[START PROPERTIES]
Tahoma, 0, 8, 5, 13, 11, 21, 2, 0
[END PROPERTIES]
[EOF]
